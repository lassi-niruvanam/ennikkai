import re
import unittest

from роОрогрпНрогро┐роХрпНроХрпИ import роЙро░рпИроХрпНроХрпБ, роОрогрпНрогрпБроХрпНроХрпБ, роорпБро▒рпИроорпИроХро│рпН, роЪрпБро░рпБроЩрпНроХрпБро▒ро┐родрпНродрпКроЯро░рпН

роОро┤рпБродро▓рпН = {
    'роУройрпНро▒рпБ': {'роОрогрпН': 1, 'latin': '1', 'ркЧрлБркЬрк░рк╛ркдрлА': 'рлз', 'родрооро┐ро┤рпН': 'рпз', "Mayab'": 'ЁЭЛб', 'сМНсЛХсЛЭ': 'сНй'},
    'рокродрпНродрпБ': {'роОрогрпН': 10, 'latin': '10', 'ркЧрлБркЬрк░рк╛ркдрлА': 'рлзрлж', 'родрооро┐ро┤рпН': 'рп░', "Mayab'": 'ЁЭЛк', 'сМНсЛХсЛЭ': 'сН▓'},
    'роирпВро▒рпБ': {'роОрогрпН': 100, 'latin': '100', 'ркЧрлБркЬрк░рк╛ркдрлА': 'рлзрлжрлж', 'родрооро┐ро┤рпН': 'рп▒', "Mayab'": 'ЁЭЛеЁЭЛа', 'сМНсЛХсЛЭ': 'сН╗'},
    'роирпВро▒рпНро▒рпБ рокродрпНродрпБ': {'роОрогрпН': 110, 'latin': '110', 'ркЧрлБркЬрк░рк╛ркдрлА': 'рлзрлзрлж', 'родрооро┐ро┤рпН': 'рп▒рп░', "Mayab'": 'ЁЭЛеЁЭЛк', 'сМНсЛХсЛЭ': 'сН╗сН▓'},
    'роЖропро┐ро░роорпН': {'роОрогрпН': 1000, 'latin': '1000', 'ркЧрлБркЬрк░рк╛ркдрлА': 'рлзрлжрлжрлж', 'родрооро┐ро┤рпН': 'рп▓', "Mayab'": 'ЁЭЛвЁЭЛкЁЭЛа', 'сМНсЛХсЛЭ': 'сН▓сН╗'},
    'рокродрпНродро╛ропро┐ро▒роорпН': {'роОрогрпН': 10000, 'latin': '10000', 'ркЧрлБркЬрк░рк╛ркдрлА': 'рлзрлжрлжрлжрлж', 'родрооро┐ро┤рпН': 'рп░рп▓', "Mayab'": 'ЁЭЛбЁЭЛеЁЭЛаЁЭЛа', 'сМНсЛХсЛЭ': 'сН╝'},
    'рокродрпНродро┐ройрпКройрпНро▒ро╛ропро┐ро▒роорпН': {
        'роОрогрпН': 11000, 'latin': '11000', 'ркЧрлБркЬрк░рк╛ркдрлА': 'рлзрлзрлжрлжрлж', 'родрооро┐ро┤рпН': 'рп░рпзрп▓', "Mayab'": 'ЁЭЛбЁЭЛзЁЭЛкЁЭЛа', 'сМНсЛХсЛЭ': 'сН╝сН▓сН╗'
    },
    'ро▓роЪрпНроЪро┐ропроорпН': {
        'роОрогрпН': 100000, 'latin': '100000', 'ркЧрлБркЬрк░рк╛ркдрлА': 'рлзрлжрлжрлжрлжрлж', 'родрооро┐ро┤рпН': 'рп▒рп▓', "Mayab'": 'ЁЭЛмЁЭЛкЁЭЛаЁЭЛа', 'сМНсЛХсЛЭ': 'сН▓сН╝'
    },
    'роХрпЛроЯро┐': {
        'роОрогрпН': 10000000, 'latin': '10000000', 'ркЧрлБркЬрк░рк╛ркдрлА': 'рлзрлжрлжрлжрлжрлжрлжрлж', 'родрооро┐ро┤рпН': 'рп░рп▓рп▓', "Mayab'": 'ЁЭЛгЁЭЛвЁЭЛкЁЭЛаЁЭЛаЁЭЛа',
        'сМНсЛХсЛЭ': 'сН▓сН╗сН╝'
    },
    'роорпБро┤рпБ_роОрогрпН': {'роОрогрпН': 123, 'latin': '123', 'ркЧрлБркЬрк░рк╛ркдрлА': 'рлзрлирлй', 'родрооро┐ро┤рпН': 'рп▒рпирп░рпй', "Mayab'": 'ЁЭЛжЁЭЛг', 'сМНсЛХсЛЭ': 'сН╗сН│сНл'},
    'роорпБро┤рпБ_роОрогрпН_рокродро┐': {'роОрогрпН': 123., 'latin': '123.', 'ркЧрлБркЬрк░рк╛ркдрлА': 'рлзрлирлй.', 'родрооро┐ро┤рпН': 'рп▒рпирп░рпй.', "Mayab'": 'ЁЭЛжЁЭЛг.',
                     'сМНсЛХсЛЭ': 'сН╗сН│сНл.'},
    'рокродро┐ройрпНроороорпН': {
        'роОрогрпН': 0.123456789, 'latin': '0.123456789', 'ркЧрлБркЬрк░рк╛ркдрлА': 'рлж.рлзрлирлйрлкрллрлмрлнрлорлп', 'родрооро┐ро┤рпН': 'рпж.рпзрпирпйрпкрплрпмрпнрпорпп',
        "Mayab'": 'ЁЭЛа.ЁЭЛвЁЭЛйЁЭЛзЁЭЛнЁЭЛбЁЭЛоЁЭЛйЁЭЛ▓ЁЭЛи', 'сМНсЛХсЛЭ': '0.сНйсНксНлсНмсНнсНосНпсН░сН▒'},
    'рокрпБродро┐ропроорпН_рокродро┐ройрпНроороорпН_рокро▓_рокрпБродро┐ропроорпН': {
        'роОрогрпН': 0.0000123, 'latin': '0.0000123', 'ркЧрлБркЬрк░рк╛ркдрлА': 'рлж.рлжрлжрлжрлжрлзрлирлй',
        'родрооро┐ро┤рпН': 'рпж.рпжрпжрпжрпжрпзрпирпй', "Mayab'": 'ЁЭЛа.ЁЭЛаЁЭЛаЁЭЛаЁЭЛбЁЭЛ│ЁЭЛзЁЭЛд', 'сМНсЛХсЛЭ': '0.0000сНйсНксНл'
    },
    'рокродро┐ройрпНроороорпН_рокро▓_рокрпБродро┐ропроорпН': {
        'роОрогрпН': 12.0000123, 'latin': '12.0000123', 'ркЧрлБркЬрк░рк╛ркдрлА': 'рлзрли.рлжрлжрлжрлжрлзрлирлй', 'родрооро┐ро┤рпН': 'рп░рпи.рпжрпжрпжрпжрпзрпирпй',
        "Mayab'": 'ЁЭЛм.ЁЭЛаЁЭЛаЁЭЛаЁЭЛбЁЭЛ│ЁЭЛзЁЭЛд', 'сМНсЛХсЛЭ': 'сН▓сНк.0000сНйсНксНл'
    },
    'роОродро┐ро░рпН': {
        'роОрогрпН': -1.23, 'latin': '-1.23', 'ркЧрлБркЬрк░рк╛ркдрлА': '-рлз.рлирлй', 'родрооро┐ро┤рпН': '-рпз.рпирпй', "Mayab'": '-ЁЭЛб.ЁЭЛдЁЭЛм', 'сМНсЛХсЛЭ': '-сНй.сНксНл'
    },
    'роОро▓рпНро▓ро╛роорпН': {
        'роОрогрпН': -123456789.00012345678900, 'latin': '-123456789.00012345678900',
        'ркЧрлБркЬрк░рк╛ркдрлА': '-рлзрлирлйрлкрллрлмрлнрлорлп.рлжрлжрлжрлзрлирлйрлкрллрлмрлнрлорлпрлжрлж', 'сМНсЛХсЛЭ': '-сН╝сН│сНлсН╗сН╡сНнсН╝сН╖сНпсН╗сН╣сН▒.000сНйсНксНлсНмсНнсНосНпсН░сН▒00'
    },
    'рокрпБроЬро┐ропроорпН': {'роОрогрпН': 0, 'latin': '0', 'ркЧрлБркЬрк░рк╛ркдрлА': 'рлж', 'родрооро┐ро┤рпН': 'рпж', "Mayab'": 'ЁЭЛа'},

    'рокрпБроЬро┐ропроорпН_рокродро┐ройрпНроороорпН_рокрпБроЬро┐ропроорпН': {'роОрогрпН': 0.0, 'latin': '0.0', 'ркЧрлБркЬрк░рк╛ркдрлА': 'рлж.рлж', 'родрооро┐ро┤рпН': 'рпж.рпж', "Mayab'": 'ЁЭЛа.ЁЭЛа'},
    'рокрпЖро░ро┐роп роОройрпН': {
        'роОрогрпН': 12000000000000000., 'latin': '12000000000000000.', 'ркЧрлБркЬрк░рк╛ркдрлА': 'рлзрлирлжрлжрлжрлжрлжрлжрлжрлжрлжрлжрлжрлжрлжрлжрлж.',
        'родрооро┐ро┤рпН': 'рп░рпирп▓рп▓рп▓рп▓рп▓.', "Mayab'": 'ЁЭЛвЁЭЛ▓ЁЭЛлЁЭЛ▒ЁЭЛкЁЭЛаЁЭЛаЁЭЛаЁЭЛаЁЭЛаЁЭЛаЁЭЛаЁЭЛа.', 'сМНсЛХсЛЭ': 'сН╝сН│сН╗сН╝сН╝сН╝.'
    }
}

рокроЯро┐родрпНродро▓рпН = {
    'рокродро┐ройрпНроороорпН_роЖро░роорпНрокрпБ': {'роОрогрпН': .123, 'latin': '.123', 'ркЧрлБркЬрк░рк╛ркдрлА': '.рлзрлирлй', 'родрооро┐ро┤рпН': '.рпзрпирпй', "Mayab'": '.ЁЭЛвЁЭЛйЁЭЛд'},
    'рокродро┐ройрпНроороорпН_роЖро░роорпНрокрпБ_рокро▓_рокрпБродро┐ропроорпН': {
        'роОрогрпН': .0000123, 'latin': '.0000123', 'ркЧрлБркЬрк░рк╛ркдрлА': '.рлжрлжрлжрлжрлзрлирлй', 'родрооро┐ро┤рпН': '.рпжрпжрпжрпжрпзрпирпй', "Mayab'": '.ЁЭЛаЁЭЛаЁЭЛаЁЭЛбЁЭЛ│ЁЭЛзЁЭЛд'
    },
    'роОродро┐ро░рпН_рокродро┐ройрпНроороорпН_роЖро░роорпНрокрпБ': {
        'роОрогрпН': -.101, 'latin': '-.101', 'ркЧрлБркЬрк░рк╛ркдрлА': '-.рлзрлжрлз', 'родрооро┐ро┤рпН': '-.рпзрпжрпз', "Mayab'": '-.ЁЭЛвЁЭЛаЁЭЛи'
    },
    'рокрпБроЬро┐ропроорпН_рокродро┐ройрпНроороорпН': {'роОрогрпН': 0., 'latin': '0.', 'ркЧрлБркЬрк░рк╛ркдрлА': 'рлж.', 'родрооро┐ро┤рпН': 'рпж.', "Mayab'": 'ЁЭЛа.'},
}
рокроЯро┐родрпНродро▓рпН.update(роОро┤рпБродро▓рпН)


class рокро░ро┐роЪрпЛродройрпИ_рооро╛ро▒рпНро▒роорпН(unittest.TestCase):

    def _роОрогрпН_рокро░ро┐роЪрпЛродройрпИ(родройрпН, родроХро╡ро▓рпНроХро│рпН, рокропро░рпН):

        for роорпК in роорпБро▒рпИроорпИроХро│рпН:
            with родройрпН.subTest(рокропро░рпН, роорпКро┤ро┐=роорпК):
                роОрогрпН = родроХро╡ро▓рпНроХро│рпН['роОрогрпН']
                роЙ = роЙро░рпИроХрпНроХрпБ(роОрогрпН, роорпК)
                роО = роОрогрпНрогрпБроХрпНроХрпБ(роЙ, роорпКро┤ро┐=роорпК)
                родройрпН.assertIsInstance(роО, type(роОрогрпН))
                родройрпН.assertEqual(роО, роОрогрпН, msg=роЙ)

    def test_рооро╛ро▒рпНро▒роорпН(родройрпН):
        for рокропро░рпН, родроХро╡ро▓рпНроХро│рпН in рокроЯро┐родрпНродро▓рпН.items():
            родройрпН._роОрогрпН_рокро░ро┐роЪрпЛродройрпИ(родроХро╡ро▓рпНроХро│рпН, рокропро░рпН)


class рокро░ро┐роЪрпЛродройрпИ_рокроЯро┐родрпНродро▓рпН(unittest.TestCase):

    def _роОрогрпН_рокро░ро┐роЪрпЛродройрпИ(родройрпН, родроХро╡ро▓рпНроХро│рпН, рокропро░рпН):

        роОрогрпН = родроХро╡ро▓рпНроХро│рпН['роОрогрпН']
        for роорпК in родроХро╡ро▓рпНроХро│рпН:
            if роорпК == 'роОрогрпН':
                continue
            with родройрпН.subTest(рокропро░рпН, роорпКро┤ро┐=роорпК):
                роЙ = родроХро╡ро▓рпНроХро│рпН[роорпК]
                роО = роОрогрпНрогрпБроХрпНроХрпБ(роЙ, роорпКро┤ро┐=роорпК)
                родройрпН.assertIsInstance(роО, type(роОрогрпН), msg=роЙ)
                родройрпН.assertEqual(роО, роОрогрпН, msg=роЙ)

    def test_рооро╛ро▒рпНро▒роорпН(родройрпН):
        for рокропро░рпН, родроХро╡ро▓рпНроХро│рпН in рокроЯро┐родрпНродро▓рпН.items():
            родройрпН._роОрогрпН_рокро░ро┐роЪрпЛродройрпИ(родроХро╡ро▓рпНроХро│рпН, рокропро░рпН)


class рокро░ро┐роЪрпЛродройрпИ_роЪрпБро░рпБроЩрпНроХрпБро▒ро┐родрпНродрпКроЯро░рпН(unittest.TestCase):

    def _роЪрпБро░рпБроЩрпНроХрпБро▒ро┐родрпНродрпКроЯро░рпН_рокро░ро┐роЪрпЛродройрпИ(родройрпН, роорпКро┤ро┐):

        роЪрпБро░рпБроЩрпНроХрпБро▒ро┐ = роЪрпБро░рпБроЩрпНроХрпБро▒ро┐родрпНродрпКроЯро░рпН(роорпКро┤ро┐)
        for рокропро░рпН, родроХро╡ро▓рпНроХро│рпН in рокроЯро┐родрпНродро▓рпН.items():
            with родройрпН.subTest(рокропро░рпН, роорпКро┤ро┐=роорпКро┤ро┐):
                роОрогрпН = родроХро╡ро▓рпНроХро│рпН['роОрогрпН']
                роЙро░рпИ = роЙро░рпИроХрпНроХрпБ(роОрогрпН, роорпКро┤ро┐)
                роХрпБро┤рпБ = re.fullmatch(роЪрпБро░рпБроЩрпНроХрпБро▒ро┐, роЙро░рпИ)
                родройрпН.assertIsNotNone(роХрпБро┤рпБ, msg=роЙро░рпИ)

    def test_роЪрпБро░рпБроЩрпНроХрпБро▒ро┐родрпНродрпКроЯро░рпН(родройрпН):
        for роорпКро┤ро┐ in роорпБро▒рпИроорпИроХро│рпН:
            родройрпН._роЪрпБро░рпБроЩрпНроХрпБро▒ро┐родрпНродрпКроЯро░рпН_рокро░ро┐роЪрпЛродройрпИ(роорпКро┤ро┐)
