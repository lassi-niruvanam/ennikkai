import type ClientConstellation from "@constl/ipa";
import type { utils } from "@constl/ipa";

import type {
  அடிமானம்_எண்_வகை,
  இடஞ்சார்_எண்_வகை,
  எண்_வகை,
  எண்ணிக்கை_தகவல்கள்_வகை,
} from "@/வகைகள்.js";

import merge from "deepmerge";
import { EventEmitter } from "events";

import _தகவல்கள் from "@/தகவல்கள்.json" assert { type: "json" };
import { எண்ணிக்கை_கிளி, கிளி_தயாரிப்பு } from "./கிளி";
import {
  முறைமை_அடிமானங்கள்_நெடுவரிசை_குறியீடு,
  முறைமை_அடுக்குக்குறி_நெடுவரிசை_குறியீடு,
  முறைமை_ஒருங்குறி_குறியீடு_நெடுவரிசை_குறியீடு,
  முறைமை_குறியீடு_நெடுவரிசை_குறியீடு,
  முறைமை_பிரிப்பு_நெடுவரிசை_குறியீடு,
  முறைமை_வகை_நெடுவரிசை_குறியீடு,
} from "./மாறிலிகள்";

export class எண்ணிக்கை {
  விண்மீன்_தகவல்கள்: எண்ணிக்கை_தகவல்கள்_வகை;
  விண்மீன்?: ClientConstellation;
  நடவடிக்கைகள்: EventEmitter;
  கிளியை_மறந்துவிடு?: utils.schémaFonctionOublier;

  constructor({ விண்மீன் }: { விண்மீன்?: ClientConstellation }) {
    this.விண்மீன் = விண்மீன்;
    this.விண்மீன்_தகவல்கள் = {};
    this.நடவடிக்கைகள் = new EventEmitter();

    if (விண்மீன்) {
      this._கிளி_தயாரிப்பு();
    }
  }

  private async _கிளி_தயாரிப்பு(): Promise<void> {
    const கிளி = கிளி_தயாரிப்பு({
      விண்மீன்: this.விண்மீன்,
    });
    this.கிளியை_மறந்துவிடு = await கிளி.அங்கீகரிக்கப்பட்ட_உறுப்படிகளை_கேள்ளு({
      செ: (தகவல்கள்) => {
        this.விண்மீன்_தகவல்கள் =
          எண்ணிக்கை_தகவல்கள்_வடிவூட்டத்துக்கு_மாறு(தகவல்கள்);
        this.மாற்றம்_வந்துவிட்டது();
      },
    });
  }

  மாற்றம்_வந்துவிட்டது(): void {
    this.நடவடிக்கைகள்.emit("மாற்றம்");
  }

  get தகவல்கள்(): எண்ணிக்கை_தகவல்கள்_வகை {
    return merge(_தகவல்கள், this.விண்மீன்_தகவல்கள்);
  }

  get முறைமைகள்(): string[] {
    return Object.keys(this.தகவல்கள்);
  }

  தகவல்களை_பெறு({ மொழி }: { மொழி: string }): எண்_வகை {
    const தகவல்_மொழி = this.தகவல்கள்[மொழி];
    if (!தகவல்_மொழி) {
      throw Error(`தெரியாத எண்ணுரு முறைமை ${மொழி}`);
    }
    return தகவல்_மொழி;
  }

  உரைக்கு_அடிமானம்({
    எண்,
    தகவல்_மொழி
  }: {
    எண்: number;
    தகவல்_மொழி: அடிமானம்_எண்_வகை;
  }): string {
    const { குறிகள், அடிமானங்கள் } = தகவல்_மொழி;
    const பிரிப்பு = தகவல்_மொழி.பிரிப்பு || ".";
    const குறிகள்_ = [...குறிகள்];

    const எதிர் = எண் < 0;
    எண் = Math.abs(எண்);

    
    const தசம = எண்.toString().split('.')[1]

    let உரை = this._அடிமானம்_எழுதல்(எண், குறிகள்_, அடிமானங்கள்);

    if (உரை.length === 0) {
      உரை = குறிகள்_[0];
    }

    if (எதிர்) {
      உரை = "-" + உரை;
    }
    if (தசம) {
      உரை += பிரிப்பு[0] + [...தசம].map(த => குறிகள்[parseInt(த)]).join('')
    }
    return உரை;
  }

  எண்ணுக்கு_அடிமானம்({
    உரை,
    தகவல்_மொழி,
  }: {
    உரை: string;
    தகவல்_மொழி: அடிமானம்_எண்_வகை;
  }): number {
    /* 
              re.search(rf'[{தன்.அடுக்குக்குறி}]', உரை) ஆனால்:
                பின்கொடு super().எண்ணுக்கு(உரை)
      */
    const அடிமானங்கள் = தகவல்_மொழி.அடிமானங்கள்;
    const குறிகள் = [...தகவல்_மொழி.குறிகள்];
    const பிரிப்பு = தகவல்_மொழி.பிரிப்பு || ".";

    const எதிர் = உரை[0] === "-";
    if (எதிர்) {
      உரை = உரை.slice(1);
    } else {
      உரை = உரை.replace(/^\++/, "");
    }

    const [முழு, தசம] = உரை.split(பிரிப்பு[0]);
    let எண் = 0;
    if (முழு) {
      const பெட்டியல் = [...முழு]
        .map((இ) => அடிமானங்கள்[இ] || குறிகள்.indexOf(இ))
        .reverse();

      const படித்தல் = (பெ: number[]): number => {
        const ஆ = பெ[0];

        const ஐ = பெ.slice(1).find((ஈ) => ஈ > ஆ);
        const ஊ = (ஐ ? பெ.slice(1).indexOf(ஐ) : பெ.slice(1).length) + 1;
        const கீழ்_ = பெ.slice(1, ஊ);
        const கீழ் = கீழ்_.length ? படித்தல்(கீழ்_) : 1;
        const மேல் = பெ.slice(ஊ);
        const மேல்_ = மேல்.length ? படித்தல்(மேல்) : 0;
        return ஆ * கீழ் + மேல்_;
      };
      எண் = படித்தல்(பெட்டியல்);
    }

    if (தசம !== undefined) {
      if (தசம.length) {
        எண் += parseFloat(
          "." + [...தசம].map((இ) => குறிகள்.indexOf(இ).toString()).join("")
        );
      }
    }

    if (எதிர்) {
      எண் *= -1;
    }
    return எண்;
  }

  உரைக்கு_இடஞ்சார்({
    எண்,
    தகவல்_மொழி,
  }: {
    எண்: number;
    தகவல்_மொழி: இடஞ்சார்_எண்_வகை;
  }): string {
    const குறிகள் = [...தகவல்_மொழி["குறிகள்"]];
    const அடி = குறிகள்.length;
    const பிரிப்பு = (தகவல்_மொழி["பிரிப்பு"] || ".")[0];

    if (அடி === 10) {
      let உரை = எண்.toString();
      if (உரை.includes(".")) {
        உரை = உரை.replace(".", பிரிப்பு);
      }
      return Array.prototype.map
        .call(உரை, (x) => (x === பிரிப்பு ? x : குறிகள்[parseInt(x)]))
        .join("");
    }

    if (எண் === 0) {
      return குறிகள்[0];
    }

    const எதிர் = எண் < 0;

    let தசம = எண் % 1;
    தசம = parseFloat(தசம.toFixed(எ_சுற்று(எண்)));
    எண் = Math.abs(எண்);

    let உரை = "";
    while (எண்) {
      உரை = குறிகள்[Math.floor(எண் % அடி)] + உரை;
      எண் = Math.floor(எண் / அடி);
    }
    if (தசம) {
      உரை += பிரிப்பு;
    }

    let சுற்று: number;
    while (தசம !== 0) {
      சுற்று = எ_சுற்று(தசம);
      தசம *= அடி;
      உரை += குறிகள்[Math.floor(தசம)];
      தசம -= Math.floor(தசம);
      தசம = parseFloat(தசம.toFixed(சுற்று));
    }

    if (எதிர்) {
      உரை = "-" + உரை;
    }
    return உரை;
  }

  எண்ணுக்கு_இடஞ்சார்({
    உரை,
    மொழி,
    தகவல்_மொழி,
  }: {
    உரை: string;
    மொழி: string;
    தகவல்_மொழி: இடஞ்சார்_எண்_வகை;
  }): number {
    const குறிகள் = [...தகவல்_மொழி["குறிகள்"]];
    const அடுக்குக்குறி = தகவல்_மொழி["அடுக்குக்குறி"] || "eE";
    const அடிமானம் = குறிகள்.length;
    const பிரிப்பு = தகவல்_மொழி["பிரிப்பு"] || ".";

    உரை = உரை.replace(/^\++/, "");
    if (அடுக்குக்குறி.split("").some((அடு) => உரை.includes(அடு))) {
      const [எண், அடு] = உரை.split(RegExp(அடுக்குக்குறி));
      return (
        this.எண்ணுக்கு_இடஞ்சார்({ உரை: எண், மொழி, தகவல்_மொழி }) *
        அடிமானம் ** this.எண்ணுக்கு({ உரை: அடு, மொழி })
      );
    }

    if (அடிமானம் === 10) {
      for (const [எ, குறி] of குறிகள்.entries()) {
        உரை = உரை.replace(குறி, எ.toString());
      }
      for (const பி of பிரிப்பு.split("")) {
        உரை = உரை.replace(பி, ".");
      }
      return parseFloat(உரை);
    } else {
      let எண் = 0;
      const பிரிவு = உரை.split(/\./);
      let முழு = பிரிவு[0];
      const தசம = பிரிவு[1];

      const எதிர் = முழு[0] === "-";
      முழு = முழு.replace(/^-+/, "");
      if (முழு) {
        for (const அ of முழு) {
          எண் *= அடிமானம்;
          எண் += குறிகள்.indexOf(அ);
        }
      }
      if (தசம) {
        let த = அடிமானம்;
        for (const அ of தசம) {
          எண் += குறிகள்.indexOf(அ) / த;
          எண் = parseFloat(எண்.toFixed(எ_சுற்று(1 / த)));
          த *= அடிமானம்;
        }
      }
      எண் = எதிர் ? -எண் : எண்;
      return எண்;
    }
  }

  உரைக்கு({ எண், மொழி }: { எண்: number; மொழி: string }): string {
    const தகவல்_மொழி = this.தகவல்களை_பெறு({ மொழி });

    if (தகவல்_மொழி.வகை === "இடஞ்சார்") {
      return this.உரைக்கு_இடஞ்சார்({ எண், தகவல்_மொழி });
    } else {
      return this.உரைக்கு_அடிமானம்({
        எண்,
        தகவல்_மொழி,
      });
    }
  }

  எண்ணுக்கு({ உரை, மொழி }: { உரை: string; மொழி: string }): number {
    const தகவல்_மொழி = this.தகவல்களை_பெறு({ மொழி });
    return this.தகவல்களுடன்_எண்ணுக்கு({ உரை, மொழி, தகவல்_மொழி });
  }

  தகவல்களுடன்_எண்ணுக்கு({
    உரை,
    மொழி,
    தகவல்_மொழி,
  }: {
    உரை: string;
    மொழி: string;
    தகவல்_மொழி: எண்_வகை;
  }): number {
    const வகை = தகவல்_மொழி["வகை"];
    if (வகை === "இடஞ்சார்") {
      return this.எண்ணுக்கு_இடஞ்சார்({ உரை, மொழி, தகவல்_மொழி });
    } else if (வகை === "அடிமானம்") {
      return this.எண்ணுக்கு_அடிமானம்({ உரை, தகவல்_மொழி });
    } else {
      throw Error(`தெரியாத எண்ணுரு முறைமை வகை ${வகை}`);
    }
  }

  private _அடிமானம்_எழுதல்(
    எண்: number,
    குறிகள்: string[],
    அடிமானங்கள்: அடிமானம்_எண்_வகை["அடிமானங்கள்"]
  ): string {
    let மீதி = எண்;
    let உரை = "";

    for (const [அடி, மதிப்பு] of Object.entries(அடிமானங்கள்).sort(
      (a, b) => b[1] - a[1]
    )) {
      const ம = Math.floor(மீதி / மதிப்பு);
      if (ம) {
        மீதி -= ம * மதிப்பு;
        if (ம !== 1) {
          உரை += this._அடிமானம்_எழுதல்(ம, குறிகள், அடிமானங்கள்);
        }
        உரை += அடி;
      }
    }

    if (மீதி) {
      உரை = உரை + குறிகள்[Math.floor(மீதி)];
    }

    return உரை;
  }

  // ஒத்திசைவற்ற செயல்பாடுகள்

  பின்பற்று(செ: () => void): () => void {
    this.நடவடிக்கைகள்.on("மாற்றம்", செ);
    செ();
    return () => {
      this.நடவடிக்கைகள்.off("மாற்றம்", செ);
    };
  }

  முறைமைகளை_பின்பற்று({
    செ,
  }: {
    செ: utils.schémaFonctionSuivi<string[]>;
  }): () => void {
    return this.பின்பற்று(() => செ(this.முறைமைகள்));
  }

  உரைக்கு_பின்பற்று({
    எண்,
    மொழி,
    செ,
  }: {
    எண்: number;
    மொழி: string;
    செ: utils.schémaFonctionSuivi<string>;
  }): () => void {
    return this.பின்பற்று(() => செ(this.உரைக்கு({ எண், மொழி })));
  }

  எணுக்கு_பின்பற்று({
    உரை,
    மொழி,
    செ,
  }: {
    உரை: string;
    மொழி: string;
    செ: utils.schémaFonctionSuivi<number>;
  }): () => void {
    return this.பின்பற்று(() => செ(this.எண்ணுக்கு({ உரை, மொழி })));
  }

  async முடி(): Promise<void> {
    if (this.கிளியை_மறந்துவிடு) await this.கிளியை_மறந்துவிடு();
  }
}

function எ_சுற்று(எண்: number): number {
  const உ = எண்.toString();
  if (உ.includes("e")) {
    const [ச, த] = உ.split("e-");
    return parseInt(த) + ச.length;
  } else {
    return உ.length;
  }
}
function எண்ணிக்கை_தகவல்கள்_வடிவூட்டத்துக்கு_மாறு(
  வரிசைகள்: Parameters<
    Parameters<எண்ணிக்கை_கிளி["அங்கீகரிக்கப்பட்ட_உறுப்படிகளை_கேள்ளு"]>[0]["செ"]
  >[0]
): எண்ணிக்கை_தகவல்கள்_வகை {
  const தகவல்கள்: எண்ணிக்கை_தகவல்கள்_வகை = {};

  for (const வ of வரிசைகள்) {
    const வகை = வ.données[முறைமை_வகை_நெடுவரிசை_குறியீடு];
    const குறியீடு = வ.données[முறைமை_குறியீடு_நெடுவரிசை_குறியீடு];
    if (வகை === "இடஞ்சார்") {
      const தகவல்: இடஞ்சார்_எண்_வகை = {
        வகை,
        குறிகள்: வ.données[முறைமை_ஒருங்குறி_குறியீடு_நெடுவரிசை_குறியீடு],
        ஒருங்குறி: வ.données[முறைமை_ஒருங்குறி_குறியீடு_நெடுவரிசை_குறியீடு],
        அடுக்குக்குறி: வ.données[முறைமை_அடுக்குக்குறி_நெடுவரிசை_குறியீடு],
        பிரிப்பு: வ.données[முறைமை_பிரிப்பு_நெடுவரிசை_குறியீடு],
      };
      தகவல்கள்[குறியீடு] = தகவல்;
    } else if (வகை === "அடிமானம்") {
      const தகவல்: அடிமானம்_எண்_வகை = {
        வகை,
        குறிகள்: வ.données[முறைமை_ஒருங்குறி_குறியீடு_நெடுவரிசை_குறியீடு],
        ஒருங்குறி: வ.données[முறைமை_ஒருங்குறி_குறியீடு_நெடுவரிசை_குறியீடு],
        அடுக்குக்குறி: வ.données[முறைமை_அடுக்குக்குறி_நெடுவரிசை_குறியீடு],
        அடிமானங்கள்: JSON.parse(
          வ.données[முறைமை_அடிமானங்கள்_நெடுவரிசை_குறியீடு]
        ),
        பிரிப்பு: வ.données[முறைமை_பிரிப்பு_நெடுவரிசை_குறியீடு],
      };
      தகவல்கள்[குறியீடு] = தகவல்;
    }
  }
  return தகவல்கள்;
}
