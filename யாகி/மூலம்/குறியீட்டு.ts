import _தகவல்கள் from '@/தகவல்கள்.json'

import { அடிமானம்_எண்_வகை, இடஞ்சார்_எண்_வகை, எண்_வகை } from '@/வகைகள்.js'
export { version as புதிப்பு } from "@/பதிப்பு.js"

const தகவல்கள்: { [இ: string]: எண்_வகை} = _தகவல்கள்

export const முறைமைகள் = Array.from(Object.keys(தகவல்கள்))


function உரைக்கு_இடஞ்சார்(எண்: number, தகவல்_மொழி: இடஞ்சார்_எண்_வகை): string {

  const குறிகள் = [...தகவல்_மொழி['குறிகள்']]
  const அடி = குறிகள்.length
  const பிரிப்பு = (தகவல்_மொழி['பிரிப்பு'] || '.')[0]

  if (அடி === 10) {
    var உரை = எண்.toString()
    if (உரை.includes('.')) {
      உரை = உரை.replace('.', பிரிப்பு)
    }
    return Array.prototype.map.call(உரை, x => x === பிரிப்பு ? x : குறிகள்[parseInt(x)]).join('')
  }

  if (எண் === 0) {
    return குறிகள்[0]
  }

  const எதிர் = எண் < 0

  var தசம = எண் % 1
  தசம = parseFloat(தசம.toFixed(எ_சுற்று(எண்)))
  எண் = Math.abs(எண்)

  var உரை = ""
  while (எண்) {
      உரை = குறிகள்[Math.floor(எண் % அடி)] + உரை
      எண் = Math.floor(எண் / அடி)
  }
  if (தசம) {
    உரை += பிரிப்பு
  }

  while (தசம !== 0) {
    var சுற்று = எ_சுற்று(தசம)
    தசம *= அடி
    உரை += குறிகள்[Math.floor(தசம)]
    தசம -= Math.floor(தசம)
    தசம = parseFloat(தசம.toFixed(சுற்று))
  }

  if (எதிர்) {
    உரை = '-' + உரை
  }
  return உரை
}

function எ_சுற்று(எண்: number): number {
    const உ = எண்.toString()
    if (உ.includes('e')) {
      const [ச, த] = உ.split('e-')
      return parseInt(த) + ச.length
    } else {
      return உ.length
    }
}

function _அடிமானம்_எழுதல்(எண்: number, குறிகள்: string[], அடிமானங்கள்: அடிமானம்_எண்_வகை["அடிமானங்கள்"]) {
  var மீதி = எண்
  var உரை = ''

  for (
    const [அடி, மதிப்பு] of Object.entries(அடிமானங்கள்).sort((a,b) => b[1]-a[1])
    ) {
      var ம = Math.floor(மீதி / மதிப்பு)
      if (ம) {
        மீதி -= ம * மதிப்பு
        if (ம !== 1) {
          உரை += _அடிமானம்_எழுதல்(ம, குறிகள், அடிமானங்கள்)
        }
        உரை += அடி
      }
    }

  if (மீதி) {
    உரை = உரை + குறிகள்[Math.floor(மீதி)]
  }

  return உரை
}

function உரைக்கு_அடிமானம்(எண்: number, குறிகள்: string, அடிமானங்கள்: அடிமானம்_எண்_வகை["அடிமானங்கள்"]) {

  const குறிகள்_ = [...குறிகள்]

  const எதிர் = எண் < 0
  எண் = Math.abs(எண்)

  var உரை = _அடிமானம்_எழுதல்(எண், குறிகள்_, அடிமானங்கள்)

  if (உரை.length === 0) {
    உரை = குறிகள்_[0]
  }

  if (எதிர்){
    உரை = '-' + உரை
  }

  return உரை

}

function எண்ணுக்கு_இடஞ்சார்(உரை: string, மொழி: string, தகவல்_மொழி: இடஞ்சார்_எண்_வகை): number {

    const குறிகள் = [...தகவல்_மொழி['குறிகள்']]
    const அடுக்குக்குறி = தகவல்_மொழி['அடுக்குக்குறி'] || "eE"
    const அடிமானம் = குறிகள்.length
    const பிரிப்பு = தகவல்_மொழி['பிரிப்பு'] || "."

    உரை = உரை.replace(/^\++/, '');
    if (அடுக்குக்குறி.split("").some(அடு => உரை.includes(அடு))) {
      const [எண், அடு] = உரை.split(RegExp(அடுக்குக்குறி))
      return எண்ணுக்கு_இடஞ்சார்(எண், மொழி, தகவல்_மொழி) * அடிமானம் ** எண்ணுக்கு(அடு, மொழி)
    }

    if (அடிமானம் === 10) {
      for (const [எ, குறி] of குறிகள்.entries()) {
        உரை = உரை.replace(குறி, எ.toString())
      }
      for (const பி of பிரிப்பு.split("")) {
        உரை = உரை.replace(பி, ".")
      }
      return parseFloat(உரை)
    } else {

      let எண் = 0
      let [முழு, தசம] = உரை.split(/\./)

      const எதிர் = முழு[0] === '-'
      முழு = முழு.replace(/^\-+/, '')
      if (முழு) {
        for (const அ of முழு) {
          எண் *= அடிமானம்
          எண் += குறிகள்.indexOf(அ)
        }
      }
      if (தசம) {
        let த = அடிமானம்
        for (const அ of தசம) {
          எண் += குறிகள்.indexOf(அ) / த
          எண் = parseFloat(எண்.toFixed(எ_சுற்று(1 / த)))
          த *= அடிமானம்
        }
      }
      எண் = எதிர் ? -எண் : எண்
      return எண்
    }
}

const எண்ணுக்கு_அடிமானம் = (உரை: string, தகவல்_மொழி: அடிமானம்_எண்_வகை): number => {
  /* 
          re.search(rf'[{தன்.அடுக்குக்குறி}]', உரை) ஆனால்:
            பின்கொடு super().எண்ணுக்கு(உரை)
  */
  const அடிமானங்கள் = தகவல்_மொழி.அடிமானங்கள்;
  const குறிகள் = [...தகவல்_மொழி.குறிகள்];
  const பிரிப்பு = தகவல்_மொழி.பிரிப்பு || "."

  const எதிர் = உரை[0] === '-'
  if (எதிர்) {
    உரை = உரை.slice(1)
  } else {
    உரை = உரை.replace(/^\++/, '')
  }
  
  let [முழு, தசம] = உரை.split(பிரிப்பு)

  let எண் = 0
  if (முழு) {
    const பெட்டியல் = [...முழு].map(இ => அடிமானங்கள்[இ] || குறிகள்.indexOf(இ)).reverse()

    const படித்தல் = ( பெ: number[] ): number => { 
      const ஆ = பெ[ 0 ] 

      const ஐ = பெ.slice(1).find((ஈ) => ஈ > ஆ)
      const ஊ = ( ஐ ? பெ.indexOf(ஐ) : பெ.slice(1).length) + 1
      const கீழ்_ = பெ.slice(1, ஊ)
      const கீழ் = கீழ்_ ? படித்தல்(கீழ்_) : 1
      const மேல் = பெ.slice(ஊ)
      const மேல்_ = மேல்.length ? படித்தல் ( மேல் ) : 0
      return ஆ * கீழ் + மேல்_ 
    }
    எண் = படித்தல் ( பெட்டியல் ) 
  }

  if (தசம !== undefined) {
    if(தசம.length){
      எண் += parseFloat("." + [...தசம].map(இ=>குறிகள்.indexOf(இ).toString()).join(""))
    }
  }            
                
  if (எதிர்){
    எண் *= -1
  }
  return எண்
}

function தகவல்கள்_பெறு(மொழி: string) {
    const தகவல்_மொழி = தகவல்கள்[மொழி]
    if (!தகவல்_மொழி) {
      throw Error(`தெரியாத எண்ணுரு முறைமை ${மொழி}`)
    }
    return தகவல்_மொழி
}

export const உரைக்கு = (எண்: number, மொழி: string): string => {
    const தகவல்_மொழி = தகவல்கள்_பெறு(மொழி)

    const வகை = தகவல்_மொழி['வகை']
    if (வகை === 'இடஞ்சார்') {
      return உரைக்கு_இடஞ்சார்(எண், தகவல்_மொழி)
    } else if (வகை === 'அடிமானம்') {
      return உரைக்கு_அடிமானம்(எண், தகவல்_மொழி['குறிகள்'], (தகவல்_மொழி as அடிமானம்_எண்_வகை)['அடிமானங்கள்'])
    } else {
      throw Error(`தெரியாத எண்ணுரு முறைமை வகை ${வகை}`)
    }
}

export const எண்ணுக்கு = (எண்: string, மொழி: string): number => {
    const தகவல்_மொழி = தகவல்கள்_பெறு(மொழி)

    const வகை = தகவல்_மொழி['வகை']
    if (வகை === 'இடஞ்சார்') {
      return எண்ணுக்கு_இடஞ்சார்(எண், மொழி, தகவல்_மொழி as இடஞ்சார்_எண்_வகை)
    } else if (வகை === 'அடிமானம்') {
      return எண்ணுக்கு_அடிமானம்(எண், தகவல்_மொழி as அடிமானம்_எண்_வகை)
    } else {
      throw Error(`தெரியாத எண்ணுரு முறைமை வகை ${வகை}`)
    }
}
